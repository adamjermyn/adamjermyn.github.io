<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on Adam Jermyn</title>
    <link>https://adamjermyn.com/tags/workflow/</link>
    <description>Recent content in Workflow on Adam Jermyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 Jan 2022 11:55:52 -0500</lastBuildDate><atom:link href="https://adamjermyn.com/tags/workflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Success is Broader Than You Think</title>
      <link>https://adamjermyn.com/posts/broad_success/</link>
      <pubDate>Mon, 31 Jan 2022 11:55:52 -0500</pubDate>
      
      <guid>https://adamjermyn.com/posts/broad_success/</guid>
      <description>Projects begin with goals. At first these are implicit, but as a project takes shape it helps to state them explicitly. Stating goals serves two purposes: it defines success, and it prompts action.
Because of this dual purpose, many goals miss the mark. On the one hand, is easy to come up with goals which define success but which are too vague to be actionable:
 &amp;ldquo;Change the world.&amp;rdquo;
&amp;ldquo;Disrupt the industry.</description>
    </item>
    
    <item>
      <title>Classifying Scientific Compute Workflows</title>
      <link>https://adamjermyn.com/posts/scientific_compute/</link>
      <pubDate>Thu, 16 Dec 2021 16:30:25 -0800</pubDate>
      
      <guid>https://adamjermyn.com/posts/scientific_compute/</guid>
      <description>Scientists use computers, and not just for typesetting. Lots of experimentation and discovery is done with computers, from modeling climate to predicting material properties to discovering exoplanets. Because computation is applied to such a broad range of questions, the ways it gets used are many and varied. This diversity of application means that tools developed and lessons learned in one domain of scientific compute workflow often don&amp;rsquo;t generalize to very different domains.</description>
    </item>
    
    <item>
      <title>Automated Project Reviews</title>
      <link>https://adamjermyn.com/posts/automated_reviews/</link>
      <pubDate>Tue, 25 May 2021 15:04:36 -0400</pubDate>
      
      <guid>https://adamjermyn.com/posts/automated_reviews/</guid>
      <description>Automated Project Reviews Getting things right without feedback is really hard, but not all feedback comes from other people! One quick way to generate meaningful feedback is by looking back at past work.
A challenge with looking back is doing it at the right time. For some kinds of feedback this is easy: schedule weekly/monthly/quarterly reviews, with prompts tuned to the relevant time-scale. But some areas of life don&amp;rsquo;t run on a regular schedule.</description>
    </item>
    
    <item>
      <title>Examples of Tools with Values</title>
      <link>https://adamjermyn.com/posts/values_examples/</link>
      <pubDate>Sat, 23 Jan 2021 17:51:55 -0500</pubDate>
      
      <guid>https://adamjermyn.com/posts/values_examples/</guid>
      <description>I previously argued that tools should express values. Here are some examples of tools I&amp;rsquo;ve made with an eye to values.
A Brainstorming Environment I have a shell script that sets up a work environment for brainstorming. It does this by copying and opening a template text document that says the following:
# Session: - Maintain an attitude of suspended judgement. - You&#39;re here to climb out of the basin. - Cmd+E Will bring up an (incomplete) list of possible approaches.</description>
    </item>
    
    <item>
      <title>Robust Tools</title>
      <link>https://adamjermyn.com/posts/robust_tools/</link>
      <pubDate>Wed, 30 Dec 2020 10:37:04 -0500</pubDate>
      
      <guid>https://adamjermyn.com/posts/robust_tools/</guid>
      <description>Good tools are robust. This doesn&amp;rsquo;t just mean that they don&amp;rsquo;t fail, it means that in many instances they can&amp;rsquo;t fail. They take common failure modes off the table, freeing you to use them and focus on your goals.
Impossible Failure Modes For a robust tool many failure modes are, by design, simply impossible, to the point where it&amp;rsquo;s hard to imagine what those failure modes are.
Consider a solid metal hammer.</description>
    </item>
    
    <item>
      <title>Tools Should Express Values</title>
      <link>https://adamjermyn.com/posts/tools_values/</link>
      <pubDate>Fri, 11 Dec 2020 15:56:14 -0500</pubDate>
      
      <guid>https://adamjermyn.com/posts/tools_values/</guid>
      <description>I want my tools to express values. I want my text editor to tell me to write clearly. I want my scientific software to command me “Be true, be open, be humble, be curious.” I want tools to be less blank pages and more pleas for me to honor the values of the craft.
Blank is not Neutral Many tools today are designed like blank pages. A writing app has a large blank space, with perhaps a few buttons for changing fonts and an indicator of how many words are on the page.</description>
    </item>
    
  </channel>
</rss>
